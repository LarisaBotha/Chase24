---
import Layout from '../layouts/Layout.astro';
import Player from '../components/Player.astro';
import TopPlayer from '../components/TopPlayer.astro';
---

<Layout title="Chase 24 - Leaderboard" background="bg-[#C671A8]">
  <div 
      x-data="{ 
        sessionKey: '', 
        players: [], 
        topPlayers: [], 
        otherPlayers: [], 
        connectWebSocket() {
          console.log(this.apiUrl);
          // Initialize WebSocket connection
          this.websocket = new WebSocket(`wss://${this.apiUrl}?session_key=${this.sessionKey}`);

          // Handle incoming messages
          this.websocket.onmessage = (event) => {
              console.log(event.data)
              // const message = JSON.parse(event.data);

              // if (message.type === 'scoreUpdate') {
              //     // Update players' scores with new data
              //     this.players = message.players;
              //     this.topPlayers = this.players.slice(0, 3);
              //     this.otherPlayers = this.players.slice(3);
              // }
          };

          // Handle connection closure and attempt reconnection
          this.websocket.onclose = () => {
              console.log('WebSocket connection closed. Reconnecting...');
              setTimeout(() => this.connectWebSocket(), 3000); // Reconnect after 3 seconds
          };

          // Handle connection errors
          this.websocket.onerror = (error) => {
              console.error('WebSocket error:', error);
          };
        },

        async fetchPlayers() {
          sessionKey = new URLSearchParams(window.location.search).get('session_key');
          console.log('Session Key:', sessionKey);
          console.log('URL:', this.apiUrl);

          // Fetch players data using the session key
          fetch(`https://${this.apiUrl}/api/players/AllForSessionSorted?session_key=${sessionKey}`)
            .then(response => {
              if (!response.ok) throw new Error('Failed to fetch player data');
              return response.json();
            })
            .then(data => {
              this.players = data; // Assuming the API returns an array of player objects
              // console.log(data)
              this.topPlayers = this.players.slice(0, 3); // Get top 3 players
              this.otherPlayers = this.players.slice(3); // Get remaining players
            })
            .catch(error => console.error('Error fetching players:', error));
        }
      }" 
      x-init=" 
        fetchPlayers();
        connectWebSocket();
      "
  >
    <!-- <h1 class="text-3xl font-bold mb-6">Leaderboard for Session: <span x-text="sessionKey"></span></h1> -->

    <!-- Leader Container -->
    <div class="w-full h-full px-2.5 justify-center items-end inline-flex">

      <!-- First ellipse (XL) -->
      <div class="absolute rounded-full border-2 border-white opacity-40" 
            style="width: 120%; height: auto; aspect-ratio: 1/1; top: 40%; left: 50%; transform: translate(-50%, -50%); z-index: -1;">
          <div class="w-full h-full bg-white rounded-full opacity-40"/>
      </div>

      <!-- Second ellipse (L) -->
      <div class="absolute rounded-full border-2 border-white opacity-40" 
            style="width: 90%; height: auto; aspect-ratio: 1/1; top: 40%; left: 50%; transform: translate(-50%, -50%); z-index: -2;">
          <div class="w-full h-full bg-white rounded-full opacity-40"/>
      </div>

      <!-- Third ellipse (M) -->
      <div class="absolute rounded-full border-2 border-white opacity-40" 
            style="width: 60%; height: auto; aspect-ratio: 1/1; top: 40%; left: 50%; transform: translate(-50%, -50%); z-index: -3;">
          <div class="w-full h-full bg-white rounded-full opacity-40"/>
      </div>

      <!-- Fourth ellipse (S) -->
      <div class="absolute rounded-full border-2 border-white opacity-40" 
            style="width: 30%; height: auto; aspect-ratio: 1/1; top: 40%; left: 50%; transform: translate(-50%, -50%); z-index: -4;">
          <div class="w-full h-full bg-white rounded-full opacity-40"/>
      </div>

      <template x-for="(player, index) in topPlayers" :key="index">
          <TopPlayer />
      </template>
    </div>

    <!-- Rank Container -->
    <div class="w-full h-auto p-[15px] bg-[#e5dbc0] rounded-tl-[20px] rounded-tr-[20px] border border-[#e5dbc0] flex-col justify-start items-center gap-[15px] inline-flex">
      <template x-for="(player, index) in otherPlayers" :key="index">
        <Player/>
      </template>
    </div>
  </div>
</Layout>
